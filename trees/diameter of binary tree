/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    pair<int,int>diameter_utils(TreeNode*root)
    {
        if(root==nullptr)
          return  make_pair(0,0);
       pair<int, int> left=diameter_utils(root->left);
        pair<int,int> right=diameter_utils(root->right);
        int case2=max(left.second,right.second);      //when root is the not the part of diameter
        if(left.first+right.first+1>case2)
            case2=left.first+right.first+1;
        int case1=max(left.first,right.first)+1;
        return make_pair(case1,case2);
    }
    int diameterOfBinaryTree(TreeNode* root) {
        if(root==nullptr)return 0;
        pair<int,int>result=diameter_utils(root);
        return max(result.first,result.second)-1;
        
    }
};
